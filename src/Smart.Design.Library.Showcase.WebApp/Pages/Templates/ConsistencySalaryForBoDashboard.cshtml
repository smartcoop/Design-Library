@page
@model Smart.Design.Library.Showcase.Pages.Templates.ConsistencySalaryForBoDashboardModel
@using Kendo.Mvc.TagHelpers
@using Kendo.Mvc.UI
@{
    ViewData["Title"] = "Consistency salary for BO dashboard";
}

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@Html.AntiForgeryToken()

<div class="c-app-layout">
    @await Html.PartialAsync("Shared/_TemplatesHeader")
    <main class="u-maximize-width">
        <div class="c-app-layout-inner">
            @await Html.PartialAsync("Shared/_TemplatesSideMenu")
            <div class="c-app-layout-inner__content">
                @await Html.PartialAsync("Shared/_TemplatesMainTitle")
                <div class="o-container o-container--large">
                    <div class="o-container-vertical--padding-mini u-position-relative">
                        <form asp-page-handler="GenerateReport" method="post" class="k-d-flex k-align-items-flex-end">
                            <span>
                                @(Html.Kendo().DateRangePickerFor(m => m.FromDate, m => m.ToDate)
                                    .Name("dateRangePicker")
                                    .HtmlAttributes(new { style = "width: auto; float: left" })
                                )
                            </span>
                            <span class="u-spacer-left-xl">
                                @(Html.Kendo().NumericTextBoxFor(m => m.MinimumDelta)
                                    .Step(1)
                                    .Min(0)
                                    .Decimals(2)
                                    .Format("c")
                                    .Label(lb => lb
                                        .Content("Minimum delta")
                                        .Floating(true))
                                    .HtmlAttributes(new { style = "width: 150px" })
                                )
                            </span>
                            <span class="u-spacer-left-xl">
                                @(Html.Kendo().Button()
                                    .Name("generateReportBtn")
                                    .ThemeColor(ThemeColor.Primary)
                                    .Content("Generate report")
                                    .HtmlAttributes(new { type = "submit" })
                                    .Events(e => e.Click("GetForgeryToken"))
                                )
                            </span>
                            <span class="u-spacer-left-s">
                                @(Html.Kendo().Button()
                                    .Name("fixIssuesBtn")
                                    .ThemeColor(ThemeColor.Primary)
                                    .Content("Fix issues")
                                    .Events(e => e.Click("ReactToClickOnFixIssuesBtn"))
                                )
                            </span>
                        </form>
                    </div>
                    <div class="u-position-relative">
                        @(Html.Kendo().Grid<ConsistencySalaryAnomaly>()
                            .Name("consistencySalaryAnomalyGrid")
                            .Sortable()
                            .Filterable()
                            .Scrollable()
                            .Resizable(r => r.Columns(true))
                            .AllowCopy()
                            .Size(ComponentSize.Small)
                            .Selectable(s => s.Mode(GridSelectionMode.Multiple))
                            .ToolBar(tb =>
                            {
                                tb.Excel();
                            })
                            .Columns(columns =>
                            {
                                columns
                                    .Bound(column => column.MemberReference);
                                columns
                                    .Bound(column => column.WorkerReference);
                                columns
                                    .Bound(column => column.ContractReference);
                                columns
                                    .Bound(column => column.ContractStartDate)
                                    .Format("{0:d}");
                                columns
                                    .Bound(column => column.ContractDurationInDays);
                                columns
                                    .Bound(column => column.SamRawSalary)
                                    .Format("{0:0.00$}");
                                columns
                                    .Bound(column => column.ForHrmRawSalary)
                                    .Format("{0:0.00$}");
                                columns
                                    .Bound(column => column.RawSalaryDelta)
                                    .Format("{0:0.00$}");
                                columns
                                    .Bound(column => column.IsActive)
                                    .ClientTemplate("<input type='checkbox' #= IsActive? checked='checked': checked='' # class='chkbx' disabled='disabled'/>"); ;
                            })
                            .Excel(excel => excel
                                .AllPages(true)
                                .Filterable(true)
                                .FileName(DateTime.Now.ToString("yyyy-MM-dd HH'h'mm") + " - consistency salary issues.xlsx")
                            )
                            .DataSource(ds => ds
                                .Ajax()
                                .Read(r => r.Url("/Templates/ConsistencySalaryForBoDashboard?handler=Read").Data("GetForgeryToken"))
                                .PageSize(25)
                            )
                            .Pageable(p => p.PageSizes(new[] { 25, 100, 500 }))
                            .HtmlAttributes(new { style = "height: calc(100vh - 225px); user-select: none;" })
                        )
                    </div>
                </div>
            </div>
        </div>
    </main>
</div>

<script>
    // trick to prevent form submission on refresh
    if (window.history.replaceState) {
        window.history.replaceState(null, null, window.location.href);
    }

    // Kendo objects mapped to their related html elements
    var anomalyKendoGrid = null;

    // initialize the "Kendo variables"
    $(document).ready(function () {
        anomalyKendoGrid = $("#consistencySalaryAnomalyGrid").data("kendoGrid");
        console.log("anomalyKendoGrid", anomalyKendoGrid);
    });

    // mandatory function for most of the Kendo widgets
    function GetForgeryToken() {
        return kendo.antiForgeryTokens();
    }

    function ReactToClickOnFixIssuesBtn(e) {
        let selectedAnomalyDataItems = GetSelectedAnomalyDataItems();
        if (selectedAnomalyDataItems.length > 0) {
            kendo.confirm(`The ${selectedAnomalyDataItems.length} selected issue(s) will be magically fixed. Please confirm.`)
                .done(() => {
                    let anomalyIds = selectedAnomalyDataItems.map(dataItem => dataItem.get("Id"));
                    $.post("/Templates/ConsistencySalaryForBoDashboard?handler=FixIssues",
                        Object.assign(
                            GetForgeryToken(),
                            { anomalyIds: anomalyIds })
                    ).done(() => {
                        // We reload the page. An easy solution but probably a bit rough...
                        location.replace(location.href);
                    });
                });
        }
        else {
            kendo.alert("Please select at least one row in the grid.")
        }
    }

    function GetSelectedAnomalyDataItems() {
        let selectedRowDataItems = [];

        if (anomalyKendoGrid != null) {
            let selectedRows = anomalyKendoGrid.select();
            for (let selectedRow of selectedRows) {
                let selectedRowDataItem = anomalyKendoGrid.dataItem(selectedRow);
                selectedRowDataItems.push(selectedRowDataItem);
            }
        }

        return selectedRowDataItems;
    }
</script>
